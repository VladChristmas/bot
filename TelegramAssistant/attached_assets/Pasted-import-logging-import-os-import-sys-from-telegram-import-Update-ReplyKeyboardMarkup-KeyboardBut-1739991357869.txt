import logging
import os
import sys
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from database import Database

# Настройка логирования
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Переменные окружения
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))

# Инициализация базы данных
db = Database()

class TelegramBot:
    def __init__(self):
        """Инициализация бота"""
        self.app = None

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Обработчик команды /start"""
        try:
            if not update.effective_user:
                logger.error("Не удалось получить информацию о пользователе")
                return

            user_id = update.effective_user.id
            logger.info(f"Получена команда /start от пользователя {user_id}")

            if user_id != ADMIN_ID:
                logger.warning(f"Попытка доступа от неавторизованного пользователя {user_id}")
                await update.message.reply_text("⛔ У вас нет доступа к этому боту!")
                return

            # Основные кнопки меню
            keyboard = [
                [KeyboardButton("📝 Создать новое задание")],
                [KeyboardButton("📋 Просмотр активных заданий")],
                [KeyboardButton("👥 Просмотр списка подключенных чатов")],
                [KeyboardButton("❌ Удалить чат из списка управляемых")],
                [KeyboardButton("➕ Создать группу чатов")] #Added button for creating chat groups
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "🏠 Главное меню",
                reply_markup=reply_markup
            )
            logger.info(f"Успешно отправлено приветственное сообщение пользователю {user_id}")
        except Exception as e:
            logger.error(f"Ошибка в команде /start: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Обработчик команды /help"""
        try:
            if not update.effective_user:
                logger.error("Не удалось получить информацию о пользователе")
                return

            user_id = update.effective_user.id
            logger.info(f"Получена команда /help от пользователя {user_id}")

            if user_id != ADMIN_ID:
                logger.warning(f"Попытка доступа от неавторизованного пользователя {user_id}")
                await update.message.reply_text("⛔ У вас нет доступа к этому боту")
                return

            help_text = """
📌 *Основные команды*
/start - Запуск бота и вход в панель администратора
/help - Показать это справочное сообщение
/addchat - Добавить текущий чат в список управляемых
/remove_chat - Удалить чат из списка управляемых
/list_chats - Просмотр списка подключенных чатов

📝 *Управление заданиями*
• Создание новых заданий
• Отправка заданий в чаты
• Просмотр активных заданий
• Мониторинг выполнения

👥 *Управление чатами*
• Добавление чатов через /addchat
• Создание групп чатов
• Управление списком чатов
• Удаление чатов

💡 *Совет*
Используйте команду /addchat в каждом чате, которым хотите управлять.
Для создания группы чатов используйте соответствующий раздел в меню.
"""
            await update.message.reply_text(help_text, parse_mode='Markdown')
            logger.info(f"Успешно отправлено сообщение помощи пользователю {user_id}")
        except Exception as e:
            logger.error(f"Ошибка в команде /help: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Показать статистику бота"""
        try:
            if not update.message or not update.effective_user:
                return

            user_id = update.effective_user.id
            if user_id != ADMIN_ID:
                await update.message.reply_text("⛔ У вас нет доступа к просмотру статистики!")
                return

            # Показываем меню статистики
            keyboard = [
                [KeyboardButton("📊 Активные задания"), KeyboardButton("📈 Общая статистика")],
                [KeyboardButton("🔙 Назад")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "📊 Выберите тип статистики:",
                reply_markup=reply_markup
            )
            logger.info(f"Отправлено меню статистики пользователю {user_id}")

        except Exception as e:
            logger.error(f"Ошибка отправки меню статистики: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def show_general_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Показать общую статистику"""
        try:
            # Using the proper database query method
            stats = db.execute_query("""
                SELECT 
                    (SELECT COUNT(*) FROM chats) as total_chats,
                    (SELECT COUNT(*) FROM tasks WHERE status = 'active') as active_tasks,
                    (SELECT COUNT(*) FROM tasks WHERE status = 'completed') as completed_tasks,
                    (SELECT COUNT(*) FROM responses WHERE status = 'completed') as total_responses
            """)[0]

            stats_text = (
                "📊 *Общая статистика*\n\n"
                f"👥 Подключенные чаты: {stats['total_chats']}\n"
                f"📝 Активные задания: {stats['active_tasks']}\n"
                f"✅ Завершённые задания: {stats['completed_tasks']}\n"
                f"📨 Полученные ответы: {stats['total_responses']}\n\n"
                "🤖 *Информация о системе*\n"
                f"• Статус: Активен\n"
                f"• Версия: 1.0\n"
                f"• Время работы: {context.bot_data.get('start_time', 'Н/Д')}"
            )

            keyboard = [
                [KeyboardButton("🔄 Обновить")],
                [KeyboardButton("🔙 Назад")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                stats_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            logger.info("Отправлена общая статистика")

        except Exception as e:
            logger.error(f"Ошибка получения статистики: {e}", exc_info=True)
            await update.message.reply_text("⚠️ Произошла ошибка при получении статистики")


    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Показать настройки бота"""
        try:
            keyboard = [
                [KeyboardButton("👥 Управление чатами"), KeyboardButton("🔔 Уведомления")],
                [KeyboardButton("🔐 Права доступа"), KeyboardButton("⚙️ Конфигурация")],
                [KeyboardButton("🔙 Назад"), KeyboardButton("🏠 Главное меню")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "⚙️ Настройки бота\n"
                "Выберите раздел настроек:",
                reply_markup=reply_markup
            )
            logger.info("Отправлены настройки бота")
        except Exception as e:
            logger.error(f"Ошибка отправки настроек: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Показать главное меню с основными командами"""
        try:
            keyboard = [
                [KeyboardButton("📝 Создать новое задание")],
                [KeyboardButton("📋 Просмотр активных заданий")],
                [KeyboardButton("👥 Просмотр списка подключенных чатов")],
                [KeyboardButton("👥 Создать группу чатов")],
                [KeyboardButton("⚙️ Настройки"), KeyboardButton("❓ Помощь")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            logger.info("Отображение главного меню с кнопками")
            await update.message.reply_text(
                "📋 Выберите действие:",
                reply_markup=reply_markup
            )
            logger.info("Главное меню успешно отображено")

        except Exception as e:
            logger.error(f"Ошибка отображения главного меню: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def start_new_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Начало создания нового задания"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            context.user_data['state'] = 'awaiting_task_text'
            keyboard = [
                [KeyboardButton("🔙 Отмена")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "📝 Введите задание:",
                reply_markup=reply_markup
            )
            logger.info(f"Запрошен ввод текста задания от пользователя {update.effective_user.id}")

        except Exception as e:
            logger.error(f"Ошибка начала создания задания: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def handle_task_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Обработка введенного текста задания"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            task_text = update.message.text
            if task_text == "🔙 Отмена":
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return

            context.user_data['task_text'] = task_text
            context.user_data['state'] = 'choosing_recipient_type'

            keyboard = [
                [KeyboardButton("👥 Групповые чаты")],
                [KeyboardButton("👤 Личные сообщения")],
                [KeyboardButton("📋 Группы чатов")],
                [KeyboardButton("🔙 Отмена")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "📨 Выберите тип получателей:",
                reply_markup=reply_markup
            )
            logger.info(f"Сохранен текст задания, ожидается выбор типа получателей")

        except Exception as e:
            logger.error(f"Ошибка обработки текста задания: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def handle_recipient_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Обработка выбора типа получателей"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            recipient_type = update.message.text
            if recipient_type == "🔙 Отмена":
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return

            context.user_data['recipient_type'] = recipient_type

            if recipient_type == "👥 Групповые чаты":
                # Получаем список групповых чатов
                chats = db.execute_query(
                    "SELECT chat_id, title FROM chats WHERE is_group = 1"
                )
                keyboard = [
                    [KeyboardButton(f"⬜ {chat['title']}")] for chat in chats
                ]
            elif recipient_type == "👤 Личные сообщения":
                # Получаем список личных чатов
                chats = db.execute_query(
                    "SELECT chat_id, title FROM chats WHERE is_group = 0"
                )
                keyboard = [
                    [KeyboardButton(f"⬜ {chat['title']}")] for chat in chats
                ]
            else:  # "📋 Группы чатов"
                # Получаем список групп
                groups = db.get_chat_groups(update.effective_user.id)
                keyboard = [
                    [KeyboardButton(f"⬜ {group['name']}")] for group in groups
                ]

            keyboard.extend([
                [KeyboardButton("✅ Подтвердить")],
                [KeyboardButton("🔙 Отмена")]
            ])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "✏️ Выберите получателей задания:\n"
                "(нажмите на получателей для выбора, затем 'Подтвердить')",
                reply_markup=reply_markup
            )
            context.user_data['state'] = 'selecting_recipients'
            context.user_data['selected_titles'] = set()
            logger.info(f"Отображен список получателей типа {recipient_type}")

        except Exception as e:
            logger.error(f"Ошибка при выборе типа получателей: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def handle_recipient_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Обработка выбора получателей"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            selection = update.message.text
            if selection == "🔙 Отмена":
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return

            if selection == "✅ Подтвердить":
                selected_recipients = context.user_data.get('selected_recipients', [])
                if not selected_recipients:
                    await update.message.reply_text("❗ Пожалуйста, выберите хотя бы одного получателя")
                    return

                # Создаем задание
                task_id = db.create_task(
                    context.user_data['task_text'],
                    update.effective_user.id
                )

                # Добавляем получателей и отправляем задание
                for recipient in selected_recipients:
                    if context.user_data['recipient_type'] == "📋 Группы чатов":
                        db.add_task_recipient(task_id, group_id=recipient['id'])
                        # Получаем чаты группы и отправляем в каждый
                        group_chats = db.get_group_chats(recipient['id'])
                        for chat in group_chats:
                            try:
                                await context.bot.send_message(
                                    chat_id=chat['chat_id'],
                                    text=f"📌 Новое задание\n\n{context.user_data['task_text']}"
                                )
                            except Exception as e:
                                logger.error(f"Ошибка отправки задания в чат {chat['chat_id']}: {e}")
                    else:
                        db.add_task_recipient(task_id, chat_id=recipient['chat_id'])
                        try:
                            await context.bot.send_message(
                                chat_id=recipient['chat_id'],
                                text=f"📌 Новое задание\n\n{context.user_data['task_text']}"
                            )
                        except Exception as e:
                            logger.error(f"Ошибка отправки задания в чат {recipient['chat_id']}: {e}")

                await update.message.reply_text("✅ Отправлено!")
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return

            # Обрабатываем выбор получателя
            if selection.startswith("⬜ ") or selection.startswith("✅ "):
                selected_titles = context.user_data.get('selected_titles', set())
                recipient_name = selection[2:]  # Убираем эмодзи из начала

                if selection.startswith("⬜ "):
                    selected_titles.add(recipient_name)
                else:
                    selected_titles.discard(recipient_name)

                context.user_data['selected_titles'] = selected_titles

                # Обновляем список получателей
                if context.user_data['recipient_type'] == "📋 Группы чатов":
                    groups = db.get_chat_groups(update.effective_user.id)
                    keyboard = [
                        [KeyboardButton(f"{'✅' if group['name'] in selected_titles else '⬜'} {group['name']}")]
                        for group in groups
                    ]
                    selected_recipients = [g for g in groups if g['name'] in selected_titles]
                else:
                    chats = db.execute_query(
                        "SELECT chat_id, title FROM chats WHERE " +
                        ("is_group = 1" if context.user_data['recipient_type'] == "👥 Групповые чаты" else "is_group = 0")
                    )
                    keyboard = [
                        [KeyboardButton(f"{'✅' if chat['title'] in selected_titles else '⬜'} {chat['title']}")]
                        for chat in chats
                    ]
                    selected_recipients = [c for c in chats if c['title'] in selected_titles]

                context.user_data['selected_recipients'] = selected_recipients

                keyboard.extend([
                    [KeyboardButton("✅ Подтвердить")],
                    [KeyboardButton("🔙 Отмена")]
                ])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                await update.message.reply_text(
                    f"✏️ Выбрано получателей: {len(selected_recipients)}\n"
                    "(нажмите на получателей для выбора/отмены, затем 'Подтвердить')",
                    reply_markup=reply_markup
                )

            logger.info(f"Обработан выбор получателя: {selection}")

        except Exception as e:
            logger.error(f"Ошибка при выборе получателей: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Обработчик текстовых сообщений"""
        try:
            if not update.message or not update.effective_user:
                return

            message_text = update.message.text
            user_id = update.effective_user.id

            # Если сообщение не от администратора - игнорируем
            if user_id != ADMIN_ID:
                return

            current_state = context.user_data.get('state')

            # Обработка состояний создания задания и группы
            if current_state == 'awaiting_task_text':
                await self.handle_task_text(update, context)
                return
            elif current_state == 'choosing_recipient_type':
                await self.handle_recipient_type(update, context)
                return
            elif current_state == 'selecting_recipients':
                await self.handle_recipient_selection(update, context)
                return
            elif current_state == 'awaiting_group_name':
                await self.handle_group_name(update, context)
                return
            elif current_state == 'selecting_chats_for_group':
                await self.handle_chat_selection_for_group(update, context)
                return

            # Обработка основных команд меню
            if message_text == "📝 Создать новое задание":
                await self.start_new_task(update, context)
            elif message_text == "📋 Просмотр активных заданий":
                await self.show_active_tasks(update, context)
            elif message_text == "👥 Просмотр списка подключенных чатов":
                await self.show_chat_list(update, context)
            elif message_text == "❌ Удалить чат из списка управляемых":
                await self.show_delete_chat_menu(update, context)
            elif message_text == "📊 Статистика":
                await self.show_statistics(update, context)
            elif message_text == "⚙️ Настройки":
                await self.show_settings(update, context)
            elif message_text == "❓ Помощь":
                await self.help_command(update, context)
            elif message_text == "🏠 Главное меню":
                await self.show_main_menu(update, context)
            elif message_text == "👥 Создать группу чатов":
                await self.create_chat_group(update, context)
            else:
                await update.message.reply_text(f"✉️ Получено сообщение: {message_text}")

        except Exception as e:
            logger.error(f"Ошибка обработки сообщения: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def handle_task_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Обработка ответа на задание - отключена для обычных пользователей"""
        return

    async def show_active_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Показать список активных заданий"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            # Получаем список активных заданий с детальной информацией о получателях
            active_tasks = db.execute_query("""
                SELECT t.text, tr.chat_id, tr.group_id, tr.status, c.title as chat_title, cg.name as group_name
                FROM tasks t
                LEFT JOIN task_recipients tr ON t.id = tr.task_id
                LEFT JOIN chats c ON tr.chat_id = c.chat_id
                LEFT JOIN chat_groups cg ON tr.group_id = cg.id
                WHERE t.status = 'active'
                ORDER BY t.created_at DESC, tr.chat_id, tr.group_id
            """)

            if not active_tasks:
                keyboard = [[KeyboardButton("🔙 Главное меню")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "📋 Нет активных заданий",
                    reply_markup=reply_markup
                )
                return

            # Группируем задания и их получателей
            tasks_grouped = {}
            for task in active_tasks:
                task_text = task['text']
                if task_text not in tasks_grouped:
                    tasks_grouped[task_text] = []

                recipient_name = task['chat_title'] or task['group_name']
                if recipient_name:
                    status_emoji = "✅" if task['status'] == 'completed' else "⏳"
                    tasks_grouped[task_text].append(f"{status_emoji} {recipient_name}")

            # Формируем текст со списком заданий
            tasks_text = "📋 Активные задания:\n\n"
            for task_text, recipients in tasks_grouped.items():
                tasks_text += f"📌 Задание:\n{task_text}\n\n"
                tasks_text += "Получатели:\n"
                tasks_text += "\n".join(recipients)
                tasks_text += "\n\n"

            keyboard = [[KeyboardButton("🔙 Главное меню")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                tasks_text,
                reply_markup=reply_markup
            )
            logger.info("Отправлен список активных заданий")

        except Exception as e:
            logger.error(f"Ошибка отображения активных заданий: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def show_chat_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Показать список подключенных чатов"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                await update.message.reply_text("⛔ У вас нет доступа к этой функции!")
                return

            # Получаем список всех чатов
            chats = db.execute_query("SELECT chat_id, title, is_group, added_at FROM chats ORDER BY added_at DESC")

            if not chats:
                keyboard = [[KeyboardButton("🔙 Назад")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "📝 Список подключенных чатов пуст.\n"
                    "Используйте команду /addchat в нужном чате, чтобы добавить его.",
                    reply_markup=reply_markup
                )
                return

            # Формируем текст со списком чатов
            chat_list = "📋 Список подключенных чатов:\n\n"
            for chat in chats:
                chat_type = "👥 Группа" if chat['is_group'] else "👤 Личный чат"
                added_date = chat['added_at'].split()[0] if chat['added_at'] else "Н/Д"
                chat_list += f"{chat_type}: {chat['title']}\n"
                chat_list += f"ID: {chat['chat_id']}\n"
                chat_list += f"Добавлен: {added_date}\n\n"

            keyboard = [[KeyboardButton("🔙 Назад")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                chat_list,
                reply_markup=reply_markup
            )
            logger.info("Отправлен список подключенных чатов")

        except Exception as e:
            logger.error(f"Ошибка отображения списка чатов: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def show_delete_chat_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text("Функция удаления чата из списка в разработке")


    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Обработчик ошибок"""
        logger.error(f"Произошла ошибка: {context.error}", exc_info=context.error)
        error_message = "⚠️ Произошла ошибка при обработке команды. Попробуйте позже."
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(error_message)
            except Exception as e:
                logger.error(f"Не удалось отправить сообщение об ошибке: {e}")

    async def add_chat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Обработчик команды /addchat"""
        try:
            if not update.effective_user or not update.effective_chat:
                logger.error("Не удалось получить информацию о пользователе или чате")
                return

            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            chat_title = update.effective_chat.title or f"Чат {chat_id}"

            if user_id != ADMIN_ID:
                logger.warning(f"Попытка доступа от неавторизованного пользователя {user_id}")
                await update.message.reply_text("⛔ У вас нет доступа к этой команде!")
                return

            # Проверяем, является ли чат группой
            is_group = update.effective_chat.type in ['group', 'supergroup']

            try:
                # Добавляем чат в базу данных
                db.execute_query(
                    "INSERT OR REPLACE INTO chats (chat_id, title, is_group) VALUES (?, ?, ?)",
                    (chat_id, chat_title, is_group)
                )

                await update.message.reply_text(f"✅ Чат '{chat_title}' успешно добавлен в список управляемых!")
                logger.info(f"Добавлен новый чат: {chat_title} (ID: {chat_id})")

            except Exception as e:
                logger.error(f"Ошибка при добавлении чата в базу данных: {e}")
                await update.message.reply_text("❌ Произошла ошибка при добавлении чата")

        except Exception as e:
            logger.error(f"Ошибка в команде /addchat: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def create_chat_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Создание новой группы чатов"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            context.user_data['state'] = 'awaiting_group_name'
            keyboard = [[KeyboardButton("🔙 Отмена")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "📝 Введите название для новой группы чатов:",
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"Ошибка создания группы чатов: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def handle_group_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Обработка ввода имени группы"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            group_name = update.message.text
            if group_name == "🔙 Отмена":
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return

            # Создаем группу
            group_id = db.create_chat_group(group_name, update.effective_user.id)
            context.user_data['current_group_id'] = group_id
            context.user_data['state'] = 'selecting_chats_for_group'

            # Получаем список всех чатов для выбора
            chats = db.execute_query(
                "SELECT chat_id, title FROM chats"
            )
            keyboard = [
                [KeyboardButton(f"⬜ {chat['title']}")] for chat in chats
            ]
            keyboard.extend([
                [KeyboardButton("✅ Подтвердить")],
                [KeyboardButton("🔙 Отмена")]
            ])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "✏️ Выберите чаты для добавления в группу:\n"
                "(нажмите на чаты для выбора, затем 'Подтвердить')",
                reply_markup=reply_markup
            )
            context.user_data['selected_titles'] = set()

        except Exception as e:
            logger.error(f"Ошибка обработки имени группы: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def handle_chat_selection_for_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Обработка выбора чатов для группы"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            selection = update.message.text
            if selection == "🔙 Отмена":
                # Удаляем созданную группу
                db.execute_query(
                    "DELETE FROM chat_groups WHERE id = ?",
                    (context.user_data.get('current_group_id'),)
                )
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return

            if selection == "✅ Подтвердить":
                selected_chats = context.user_data.get('selected_chats', [])
                if not selected_chats:
                    await update.message.reply_text("❗ Пожалуйста, выберите хотя бы один чат")
                    return

                # Добавляем выбранные чаты в группу
                group_id = context.user_data['current_group_id']
                for chat in selected_chats:
                    db.add_chat_to_group(group_id, chat['chat_id'])

                await update.message.reply_text(f"✅ Группа чатов успешно создана!")
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return

            # Обработка выбора чата
            if selection.startswith("⬜ ") or selection.startswith("✅ "):
                selected_titles = context.user_data.get('selected_titles', set())
                recipient_name = selection[2:]  # Убираем эмодзи из начала

                if selection.startswith("⬜ "):
                    selected_titles.add(recipient_name)
                else:
                    selected_titles.discard(recipient_name)

                context.user_data['selected_titles'] = selected_titles

                # Обновляем список чатов
                chats = db.execute_query("SELECT chat_id, title FROM chats")
                keyboard = [
                    [KeyboardButton(f"{'✅' if chat['title'] in selected_titles else '⬜'} {chat['title']}")]
                    for chat in chats
                ]
                selected_chats = [c for c in chats if c['title'] in selected_titles]
                context.user_data['selected_chats'] = selected_chats

                keyboard.extend([
                    [KeyboardButton("✅ Подтвердить")],
                    [KeyboardButton("🔙 Отмена")]
                ])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                await update.message.reply_text(
                    f"✏️ Выбрано чатов: {len(selected_chats)}\n"
                    "(нажмите на чаты для выбора/отмены, затем 'Подтвердить')",
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"Ошибка выбора чатов для группы: {e}", exc_info=True)
            await self.error_handler(update, context)

    def _register_handlers(self):
        """Register message handlers"""
        # Commands
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("addchat", self.add_chat_command))

        # Messages
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_message
        ))

        # Add error handler
        self.app.add_error_handler(self.error_handler)

    def run(self):
        """Запуск бота"""
        if not BOT_TOKEN:
            logger.error("Не установлен токен бота!")
            return

        if not ADMIN_ID:
            logger.error("Не установлен ID администратора!")
            return

        try:
            import asyncio
            logger.info("Запуск бота...")

            # Создаем новый цикл событий
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            # Создаем и настраиваем приложение
            self.app = Application.builder().token(BOT_TOKEN).build()
            self._register_handlers()

            # Запускаем бота
            logger.info("Бот начинает работу...")
            self.app.run_polling(drop_pending_updates=True)

        except KeyboardInterrupt:
            logger.info("Бот остановлен пользователем")
        except Exception as e:
            logger.error(f"Критическая ошибка при запуске бота: {e}", exc_info=True)
            if self.app:
                try:
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        loop.stop()
                    loop.close()
                except Exception as e:
                    logger.error(f"Ошибка при остановке бота: {e}")
            sys.exit(1)

if __name__ == "__main__":
    bot = TelegramBot()
    bot.run()