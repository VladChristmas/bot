import logging
import os
import sys
import nest_asyncio
import asyncio
import telegram
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from database import Database
from navigation_manager import NavigationManager
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.environ.get('ADMIN_ID', '0'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
db = Database()
nav_manager = NavigationManager()

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.token = os.environ.get('BOT_TOKEN')
        if not self.token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        self.app = None
        self._running = False
        self.nav_manager = nav_manager

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —Å–æ–±—ã—Ç–∏–π
            nest_asyncio.apply()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.app = Application.builder().token(self.token).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.register_handlers()

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
            self.app.add_error_handler(self.error_handler)

            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            self._running = True
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            import signal
            for sig in (signal.SIGTERM, signal.SIGINT):
                signal.signal(sig, lambda s, f: asyncio.create_task(self.stop()))

            await self.app.run_polling(drop_pending_updates=True)

        except telegram.error.Conflict as e:
            logger.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            await self.stop()
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}", exc_info=True)
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            if self.app and self._running:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
                await self.app.stop()
                self._running = False
                logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            self.app.add_handler(CommandHandler("start", self.start_command))
            self.app.add_handler(CommandHandler("help", self.help_command))
            self.app.add_handler(CommandHandler("addchat", self.add_chat_command))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            self.app.add_handler(MessageHandler(
                filters.PHOTO,
                self.handle_media_message
            ))
            self.app.add_handler(MessageHandler(
                filters.Document.ALL,
                self.handle_media_message
            ))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.app.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND,
                self.handle_message
            ))

            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}", exc_info=True)
            raise

    async def handle_back_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–Ω–æ–ø–∫–µ '–ù–∞–∑–∞–¥': {update.effective_user.id if update.effective_user else 'Unknown'}")
                return

            current_state = context.user_data.get('state', 'main_menu')
            logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

            # –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —Ç–æ –Ω–∏–∫—É–¥–∞ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
            if current_state == 'main_menu':
                logger.info("–£–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –æ—Å—Ç–∞–µ–º—Å—è –∑–¥–µ—Å—å")
                await self.show_main_menu(update, context)
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            previous_state = self.nav_manager.get_previous_state(current_state)
            logger.info(f"–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫: {previous_state}")

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            self.nav_manager.clear_user_state(context.user_data)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['state'] = previous_state
            self.nav_manager.add_to_history(context.user_data, previous_state)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if previous_state == 'main_menu':
                await self.show_main_menu(update, context)
            elif previous_state == 'settings':
                await self.show_settings(update, context)
            elif previous_state == 'viewing_tasks':
                await self.show_active_tasks(update, context)
            elif previous_state == 'viewing_chats':
                await self.show_chat_list(update, context)
            elif previous_state == 'creating_chat_group':
                await self.start_create_chat_group(update, context)
            elif previous_state == 'adding_chats_to_group':
                await self.start_create_chat_group(update, context) #fallback to start, as there is no direct previous state
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {previous_state}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                await self.show_main_menu(update, context)

            logger.info(f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {previous_state}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {e}", exc_info=True)
            await self.error_handler(update, context)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not update.message or not update.effective_user:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                return

            message_text = update.message.text
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
            if update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
                original_message = update.message.reply_to_message.text
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ {chat_id}. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {original_message}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                if not original_message or not original_message.startswith("üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:"):
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {original_message}")
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ–º. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º."
                    )
                    return

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
                parts = original_message.split("üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:", 1)
                if len(parts) != 2:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {original_message}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è")
                    return

                task_text = parts[1].strip()
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è: '{task_text}'")

                conn = None
                try:
                    conn = db.get_connection()
                    cursor = conn.cursor()

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                    cursor.execute("SELECT title FROM chats WHERE chat_id = ?", (chat_id,))
                    chat_info = cursor.fetchone()
                    if not chat_info:
                        logger.error(f"–ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                        return

                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
                    cursor.execute("""
                        SELECT t.id, t.text, tr.status
                        FROM tasks t
                        JOIN task_recipients tr ON t.id = tr.task_id
                        WHERE tr.chat_id = ?
                          AND t.status = 'active'
                          AND tr.status != 'completed'
                        ORDER BY t.created_at DESC
                    """, (chat_id,))

                    active_tasks = cursor.fetchall()
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}: {len(active_tasks)}")

                    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                    matching_task = None
                    for task in active_tasks:
                        stored_text = task[1].strip()
                        logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤:\n–ò–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: '{task_text}'\n–ò–∑ –±–∞–∑—ã: '{stored_text}'")
                        if stored_text == task_text:
                            matching_task = task
                            break

                    if matching_task:
                        task_id = matching_task[0]
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ {task_id}")

                        cursor.execute("BEGIN TRANSACTION")
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                        cursor.execute("""
                            UPDATE task_recipients 
                            SET status = 'completed' 
                            WHERE task_id = ? AND chat_id = ?
                        """, (task_id, chat_id))

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                        cursor.execute("""
                            SELECT COUNT(*) as total,
                                   SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed
                            FROM task_recipients
                            WHERE task_id = ?
                        """, (task_id,))

                        stats = cursor.fetchone()
                        if stats and stats[0] == stats[1]:  # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ
                            cursor.execute("""
                                UPDATE tasks 
                                SET status = 'completed' 
                                WHERE id = ?
                            """, (task_id,))

                        conn.commit()
                        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç. –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.")
                        logger.info(f"–ó–∞–¥–∞–Ω–∏–µ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                    else:
                        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id} —Å —Ç–µ–∫—Å—Ç–æ–º: {task_text}")
                        error_msg = [
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.",
                            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:",
                            "1. –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
                            "2. –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω",
                            "3. –í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
                        ]
                        if active_tasks:
                            error_msg.append("\n–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞:")
                            for task in active_tasks:
                                error_msg.append(f"- {task[1]}")
                        await update.message.reply_text("\n".join(error_msg))

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: {e}", exc_info=True)
                    if conn:
                        conn.rollback()
                    await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
                finally:
                    if conn:
                        conn.close()
                return

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏—è
            if user_id != ADMIN_ID:
                return

            current_state = context.user_data.get('state')
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}, –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∞"
            if message_text in ["üîô –ù–∞–∑–∞–¥", "üîô –û—Ç–º–µ–Ω–∞"]:
                logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞")
                await self.handle_back_button(update, context)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
            if current_state == 'awaiting_task_text':
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è")
                await self.handle_task_text(update, context)
                return
            elif current_state == 'choosing_recipient_type':
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
                await self.handle_recipient_type(update, context)
                return
            elif current_state == 'selecting_recipients':
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
                await self.handle_recipient_selection(update, context)
                return
            elif current_state == 'creating_chat_group':
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤")
                await self.handle_group_name(update, context)
                return
            elif current_state == 'adding_chats_to_group':
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã")
                await self.handle_chat_selection_for_group(update, context)
                return


            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
            if message_text == "üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ":
                logger.info("–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
                context.user_data['state'] = 'awaiting_task_text'
                self.nav_manager.add_to_history(context.user_data, 'awaiting_task_text')
                await self.start_new_task(update, context)
            elif message_text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π":
                context.user_data['state'] = 'viewing_tasks'
                self.nav_manager.add_to_history(context.user_data, 'viewing_tasks')
                await self.show_active_tasks(update, context)
            elif message_text == "üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤":
                context.user_data['state'] = 'viewing_chats'
                self.nav_manager.add_to_history(context.user_data, 'viewing_chats')
                await self.show_chat_list(update, context)
            elif message_text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                context.user_data['state'] = 'settings'
                self.nav_manager.add_to_history(context.user_data, 'settings')
                await self.show_settings(update, context)
            elif message_text == "‚ùì –ü–æ–º–æ—â—å":
                await self.help_command(update, context)
            elif message_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                context.user_data.clear()
                context.user_data['state'] = 'main_menu'
                self.nav_manager.add_to_history(context.user_data, 'main_menu')
                await self.show_main_menu(update, context)
            elif message_text == "üë• –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤":
                logger.info("–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤")
                await self.start_create_chat_group(update, context)
            else:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
                await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def handle_media_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            if not update.message or not update.effective_user:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_id = None
            file_type = None
            if update.message.photo:
                file_id = update.message.photo[-1].file_id
                file_type = 'photo'
            elif update.message.document:
                file_id = update.message.document.file_id
                file_type = 'document'
            else:
                await update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
                return

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
            if update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id:
                original_message = None

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º
                if update.message.reply_to_message.text:
                    original_message = update.message.reply_to_message.text
                elif update.message.reply_to_message.caption:
                    original_message = update.message.reply_to_message.caption

                logger.info(f"–ü–æ–ª—É—á–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {original_message}")

                if not original_message:
                    logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è. "
                        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º, –∞ –Ω–µ –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª."
                    )
                    return

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                task_text = None
                logger.info(f"–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {original_message}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                if "üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:" in original_message:
                    parts = original_message.split("üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:", 1)
                    if len(parts) > 1:
                        task_text = parts[1].strip()
                elif "üìù –ó–∞–¥–∞–Ω–∏–µ ‚Ññ" in original_message:
                    lines = original_message.split("\n")
                    task_lines = []
                    found_task = False

                    for line in lines:
                        if "üìù –ó–∞–¥–∞–Ω–∏–µ ‚Ññ" in line:
                            found_task = True
                            continue
                        if found_task and line.strip() and not line.startswith("–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:"):
                            task_lines.append(line.strip())
                        elif found_task and line.startswith("–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:"):
                            break

                    if task_lines:
                        task_text = "\n".join(task_lines)

                if not task_text:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{original_message}")
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. "
                        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è, –∞ –Ω–µ –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª."
                    )
                    return

                chat_id = update.effective_chat.id
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è: '{task_text}' –¥–ª—è —á–∞—Ç–∞ {chat_id}")

                try:
                    conn = db.get_connection()
                    cursor = conn.cursor()

                    try:
                        cursor.execute("BEGIN TRANSACTION")

                        # –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                        cursor.execute("""
                            SELECT t.id, tr.status
                            FROM tasks t
                            JOIN task_recipients tr ON t.id = tr.task_id
                            WHERE tr.chat_id = ? 
                              AND t.text = ?
                              AND t.status = 'active'
                              AND tr.status != 'completed'
                        """, (chat_id, task_text))

                        task = cursor.fetchone()
                        if not task:
                            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                            await update.message.reply_text(
                                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
                            )
                            return

                        task_id = task[0]
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ {task_id}")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ
                        cursor.execute("""
                            INSERT INTO response_media (task_id, chat_id, file_id, file_type)
                            VALUES (?, ?, ?, ?)
                        """, (task_id, chat_id, file_id, file_type))

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
                        cursor.execute("""
                            UPDATE task_recipients 
                            SET status = 'completed' 
                            WHERE task_id = ? AND chat_id = ?
                        """, (task_id, chat_id))

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                        cursor.execute("""
                            SELECT COUNT(*) as total,
                                   SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed
                            FROM task_recipients
                            WHERE task_id = ?
                        """, (task_id,))

                        stats = cursor.fetchone()
                        if stats and stats[0] == stats[1]:  # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ
                            cursor.execute("""
                                UPDATE tasks 
                                SET status = 'completed' 
                                WHERE id = ?
                            """, (task_id,))

                        conn.commit()
                        await update.message.reply_text(
                            "‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –æ—Ç–≤–µ—Ç—É. "
                            "–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ."
                        )

                    except Exception as e:
                        conn.rollback()
                        raise e
                    finally:
                        conn.close()

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
                    )

            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
                if not update.effective_user.id == ADMIN_ID:
                    return

                current_state = context.user_data.get('state')
                if current_state != 'awaiting_task_text':
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                if 'media_files' not in context.user_data:
                    context.user_data['media_files'] = []

                context.user_data['media_files'].append({
                    'file_id': file_id,
                    'file_type': file_type
                })

                keyboard = [
                    [KeyboardButton("üë• –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")],
                    [KeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª")],
                    [KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                await update.message.reply_text(
                    "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –∑–∞–¥–∞–Ω–∏—é!\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.show_main_menu(update, context)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏.")

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ")],
            [KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")],
            [KeyboardButton("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤")],
            [KeyboardButton("üë• –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤")],
            [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

    async def show_active_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
        try:
            tasks = db.get_active_tasks()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(tasks) if tasks else 0}")

            if not tasks:
                keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                    reply_markup=reply_markup
                )
                return

            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for task_id, task_info in tasks.items():
                message_parts = [
                    f"üìù –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id}:",
                    f"{task_info['text']}\n"
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö –∑–∞–¥–∞–Ω–∏—è
                if task_info['media']:
                    message_parts.append("üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫ –∑–∞–¥–∞–Ω–∏—é:")
                    for media in task_info['media']:
                        icon = "üñº" if media['file_type'] == 'photo' else "üìÑ"
                        message_parts.append(f"{icon} {media['file_type']}")
                    message_parts.append("")

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è—Ö
                message_parts.append("–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:")
                for chat_id, recipient in task_info['recipients'].items():
                    status_emoji = '‚úÖ' if recipient['status'] == 'completed' else '‚è≥'
                    message_parts.append(f"{status_emoji} {recipient['chat_title']}")

                    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –æ—Ç–≤–µ—Ç–µ
                    if recipient['media']:
                        message_parts.append("  üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –æ—Ç–≤–µ—Ç–µ:")
                        for media in recipient['media']:
                            icon = "üñº" if media['file_type'] == 'photo' else "üìÑ"
                            message_parts.append(f"  {icon} {media['file_type']}")

                message_parts.extend([
                    f"\n–°–æ–∑–¥–∞–Ω–æ: {task_info['created_at']}\n"
                ])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
                await update.message.reply_text("\n".join(message_parts))

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∑–∞–¥–∞–Ω–∏—è
                try:
                    for media in task_info['media']:
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏—è: {media['file_type']}, file_id: {media['file_id']}")
                        if media['file_type'] == 'photo':
                            await context.bot.send_photo(
                                chat_id=update.effective_chat.id,
                                photo=media['file_id']
                            )
                        elif media['file_type'] == 'document':
                            await context.bot.send_document(
                                chat_id=update.effective_chat.id,
                                document=media['file_id']
                            )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏—è: {e}", exc_info=True)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç–≤–µ—Ç–æ–≤
                for recipient in task_info['recipients'].values():
                    if recipient['media']:
                        await update.message.reply_text(
                            f"üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç {recipient['chat_title']}:"
                        )
                        try:
                            for media in recipient['media']:
                                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –æ—Ç–≤–µ—Ç–∞: {media['file_type']}, file_id: {media['file_id']}")
                                if media['file_type'] == 'photo':
                                    await context.bot.send_photo(
                                        chat_id=update.effective_chat.id,
                                        photo=media['file_id']
                                    )
                                elif media['file_type'] == 'document':
                                    await context.bot.send_document(
                                        chat_id=update.effective_chat.id,
                                        document=media['file_id']
                                    )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)

            keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def show_chat_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        try:
            logger.info("–ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            chats = db.execute_query("""
                SELECT chat_id, title, is_group, added_at 
                FROM chats 
                ORDER BY is_group DESC, title ASC
            """)

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —á–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {len(chats) if chats else 0}")

            if not chats:
                keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "üìã –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.\n"
                    "–î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addchat –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ",
                    reply_markup=reply_markup
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤
            message_parts = ["üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:\n"]

            # –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
            group_chats = [chat for chat in chats if chat['is_group']]
            if group_chats:
                message_parts.append("\nüë• –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã:")
                for chat in group_chats:
                    message_parts.append(
                        f"‚Ä¢ {chat['title']}\n"
                        f"  ID: {chat['chat_id']}\n"
                        f"  –î–æ–±–∞–≤–ª–µ–Ω: {chat['added_at']}"
                    )

            # –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã
            personal_chats = [chat for chat in chats if not chat['is_group']]
            if personal_chats:
                message_parts.append("\nüë§ –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã:")
                for chat in personal_chats:
                    message_parts.append(
                        f"‚Ä¢ {chat['title']}\n"
                        f"  ID: {chat['chat_id']}\n"
                        f"  –î–æ–±–∞–≤–ª–µ–Ω: {chat['added_at']}"
                    )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            message_parts.append(f"\n–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(chats)}")
            message_parts.append(f"‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã—Ö: {len(group_chats)}")
            message_parts.append(f"‚Ä¢ –õ–∏—á–Ω—ã—Ö: {len(personal_chats)}")

            keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            await update.message.reply_text(
                "\n".join(message_parts),
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏"), KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton("üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"), KeyboardButton("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)

    async def start_new_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            context.user_data['state'] = 'awaiting_task_text'
            keyboard = [
                [KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
                reply_markup=reply_markup
            )
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}", exc_info=True)
            await self.error_handler(update, context)

    asyncdef handle_task_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            message_text = update.message.text

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if message_text == "üîô –û—Ç–º–µ–Ω–∞":
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return
            elif message_text == "üë• –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π":
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                if 'task_text' in context.user_data:
                    context.user_data['state'] = 'choosing_recipient_type'
                    await self.show_recipient_options(update, context)
                else:
                    await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è")
                return
            elif message_text == "üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª" or message_text == "üìé –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª":
                await update.message.reply_text(
                    "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –∑–∞–¥–∞–Ω–∏—é"
                )
                return

            ## –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
            context.user_data['task_text'] = message_text
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            keyboard = [
                [KeyboardButton("üë• –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")],
                [KeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª")],
                [KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π?",
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def show_recipient_options(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
        keyboard = [
            [KeyboardButton("üë• –ì—Ä—É–ø–ø–∞ —á–∞—Ç–æ–≤")],
            [KeyboardButton("üë§ –û—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã")],
            [KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üì® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:",
            reply_markup=reply_markup
        )

    async def handle_recipient_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {update.effective_user.id if update.effective_user else 'Unknown'}")
                return

            choice = update.message.text

            if choice == "üîô –û—Ç–º–µ–Ω–∞":
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return

            if choice == "üë• –ì—Ä—É–ø–ø–∞ —á–∞—Ç–æ–≤":
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
                groups = db.get_chat_groups(update.effective_user.id)
                if not groups:
                    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
                    keyboard = [
                        [KeyboardButton("üë• –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤")],
                        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await update.message.reply_text(
                        "‚ùóÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø —á–∞—Ç–æ–≤.\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                        reply_markup=reply_markup
                    )
                    context.user_data['state'] = 'choosing_recipient_type'
                    return

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
                keyboard = [[KeyboardButton(f"‚¨ú {group['name']}")] for group in groups]
                keyboard.extend([
                    [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
                ])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                context.user_data['selection_type'] = 'group'
                context.user_data['state'] = 'selecting_recipients'
                context.user_data['selected_titles'] = set()

                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤:",
                    reply_markup=reply_markup
                )

            elif choice == "üë§ –û—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã":
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                chats = db.execute_query("SELECT chat_id, title FROM chats ORDER BY title")
                if not chats:
                    keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await update.message.reply_text(
                        "‚ùóÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.\n"
                        "–î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addchat",
                        reply_markup=reply_markup
                    )
                    return

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Ç–∞–º–∏
                keyboard = [[KeyboardButton(f"‚¨ú {chat['title']}")] for chat in chats]
                keyboard.extend([
                    [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
                ])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                context.user_data['selection_type'] = 'chat'
                context.user_data['state'] = 'selecting_recipients'
                context.user_data['selected_titles'] = set()

                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è:",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def send_task_to_chat(self, chat_id: int, task_text: str, media_files: list = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç"""
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
            logger.info(f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è: '{task_text}'")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
            try:
                chat = await self.app.bot.get_chat(chat_id)
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É {chat_id}, —Ç–∏–ø: {chat.type}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É {chat_id}: {e}", exc_info=True)
                return False

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = f"üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {task_text}"

            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
            try:
                message = await self.app.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    reply_markup=None
                )

                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
                if media_files:
                    for media in media_files:
                        if media['file_type'] == 'photo':
                            await self.app.bot.send_photo(
                                chat_id=chat_id,
                                photo=media['file_id'],
                                reply_to_message_id=message.message_id
                            )
                        elif media['file_type'] == 'document':
                            await self.app.bot.send_document(
                                chat_id=chat_id,
                                document=media['file_id'],
                                reply_to_message_id=message.message_id
                            )

                logger.info(f"–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return True

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}", exc_info=True)
                return False

        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}", exc_info=True)
            return False

    async def handle_recipient_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
        try:
            message_text = update.message.text

            if message_text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
                task_text = context.user_data.get('task_text')
                if not task_text:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                task_id = db.create_task(task_text, update.effective_user.id)

                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫ –∑–∞–¥–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                media_files = context.user_data.get('media_files', [])
                if media_files:
                    for media in media_files:
                        db.execute_query(
                            "INSERT INTO task_media (task_id, file_id, file_type) VALUES (?, ?, ?)",
                            (task_id, media['file_id'], media['file_type'])
                        )

                # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã/–≥—Ä—É–ø–ø—ã
                selected_titles = context.user_data.get('selected_titles', set())
                selection_type = context.user_data.get('selection_type')

                success_count = 0
                total_count = 0

                if selection_type == "group":
                    # –î–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                    for group_name in selected_titles:
                        group = db.execute_query(
                            "SELECT id FROM chat_groups WHERE name = ?",
                            (group_name,)
                        )
                        if group:
                            group_id = group[0]['id']
                            group_chats = db.get_group_chats(group_id)
                            for chat in group_chats:
                                total_count += 1
                                if await self.send_task_to_chat(chat['chat_id'], task_text, media_files):
                                    success_count += 1
                                    db.add_task_recipient(task_id, chat['chat_id'], group_id)
                else:
                    # –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤
                    for chat_title in selected_titles:
                        chat = db.execute_query(
                            "SELECT chat_id FROM chats WHERE title = ?",
                            (chat_title,)
                        )
                        if chat:
                            total_count += 1
                            chat_id = chat[0]['chat_id']
                            if await self.send_task_to_chat(chat_id, task_text, media_files):
                                success_count += 1
                                db.add_task_recipient(task_id, chat_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                await update.message.reply_text(
                    f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n"
                    f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {total_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π."
                )

                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            if message_text != "üîô –ù–∞–∑–∞–¥":
                title = message_text[2:] if message_text.startswith(('‚¨ú', '‚úÖ')) else message_text
                selected_titles = context.user_data.get('selected_titles', set())

                if title in selected_titles:
                    selected_titles.remove(title)
                    new_state = '‚¨ú'
                else:
                    selected_titles.add(title)
                    new_state = '‚úÖ'

                context.user_data['selected_titles'] = selected_titles

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = []
                if context.user_data.get('selection_type') == 'group':
                    groups = db.get_chat_groups(update.effective_user.id)
                    for group in groups:
                        button_text = f"{new_state if group['name'] == title else ('‚úÖ' if group['name'] in selected_titles else '‚¨ú')} {group['name']}"
                        keyboard.append([KeyboardButton(button_text)])
                else:
                    chats = db.execute_query("SELECT title FROM chats ORDER BY title")
                    for chat in chats:
                        button_text = f"{new_state if chat['title'] == title else ('‚úÖ' if chat['title'] in selected_titles else '‚¨ú')} {chat['title']}"
                        keyboard.append([KeyboardButton(button_text)])

                keyboard.extend([
                    [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
                ])

                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞–Ω–∏—è:",
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def start_create_chat_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            context.user_data['state'] = 'creating_chat_group'
            self.nav_manager.add_to_history(context.user_data, 'creating_chat_group')

            keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "üë• –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤:",
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def handle_group_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            group_name = update.message.text

            if group_name == "üîô –ù–∞–∑–∞–¥":
                await self.handle_back_button(update, context)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≥—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            existing_group = db.execute_query(
                "SELECT id FROM chat_groups WHERE name = ?",
                (group_name,)
            )

            if existing_group:
                await update.message.reply_text(
                    "‚ùå –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            db.execute_query(
                "INSERT INTO chat_groups (name) VALUES (?)",
                (group_name,)
            )

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            group_id = db.execute_query("SELECT last_insert_rowid() as id")[0]['id']
            context.user_data['current_group_id'] = group_id
            context.user_data['state'] = 'adding_chats_to_group'

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
            chats = db.execute_query(
                "SELECT chat_id, title FROM chats ORDER BY title"
            )

            if not chats:
                keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "‚ùóÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É.\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addchat",
                    reply_markup=reply_markup
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Ç–∞–º–∏
            keyboard = [[KeyboardButton(f"‚¨ú {chat['title']}")] for chat in chats]
            keyboard.extend([
                [KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")],
                [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
            ])

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                f"–ì—Ä—É–ø–ø–∞ '{group_name}' —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:\n"
                "(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∞—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã, –∑–∞—Ç–µ–º '–ó–∞–≤–µ—Ä—à–∏—Ç—å')",
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def handle_chat_selection_for_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        try:
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                return

            message_text = update.message.text
            group_id = context.user_data.get('current_group_id')

            if not group_id:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await self.show_main_menu(update, context)
                return

            if message_text == "üîô –ù–∞–∑–∞–¥":
                await self.handle_back_button(update, context)
                return

            if message_text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å":
                selected_chats = context.user_data.get('selected_chats', [])
                if not selected_chats:
                    await update.message.reply_text(
                        "‚ùóÔ∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞.\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∞—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                    )
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –≤ –≥—Ä—É–ø–ø—É
                for chat_id in selected_chats:
                    db.execute_query(
                        "INSERT OR IGNORE INTO group_chats (group_id, chat_id) VALUES (?, ?)",
                        (group_id, chat_id)
                    )

                await update.message.reply_text("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞!")
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
            if message_text.startswith('‚¨ú ') or message_text.startswith('‚úÖ '):
                title = message_text[2:]  # –£–±–∏—Ä–∞–µ–º emoji
                chat = db.execute_query(
                    "SELECT chat_id FROM chats WHERE title = ?",
                    (title,)
                )

                if not chat:
                    await update.message.reply_text("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                chat_id = chat[0]['chat_id']
                selected_chats = context.user_data.get('selected_chats', [])

                if chat_id in selected_chats:
                    selected_chats.remove(chat_id)
                    new_state = '‚¨ú'
                else:
                    selected_chats.append(chat_id)
                    new_state = '‚úÖ'

                context.user_data['selected_chats'] = selected_chats

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                chats = db.execute_query("SELECT chat_id, title FROM chats ORDER BY title")
                keyboard = []
                for chat in chats:
                    button_text = f"{new_state if chat['chat_id'] in selected_chats else '‚¨ú'} {chat['title']}"
                    keyboard.append([KeyboardButton(button_text)])

                keyboard.extend([
                    [KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")],
                    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
                ])

                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:\n"
                    "(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∞—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã, –∑–∞—Ç–µ–º '–ó–∞–≤–µ—Ä—à–∏—Ç—å')",
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã: {e}", exc_info=True)
            await self.error_handler(update, context)

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def add_chat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addchat –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not update.effective_user or update.effective_user.id != ADMIN_ID:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ addchat: {update.effective_user.id if update.effective_user else 'Unknown'}")
                return

            chat = update.effective_chat
            if not chat:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ")
                return

            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: ID={chat.id}, Title={chat.title}, Type={chat.type}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π
            is_group = chat.type in ['group', 'supergroup']

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —á–∞—Ç
                result = db.execute_query(
                    "SELECT chat_id FROM chats WHERE chat_id = ?",
                    (chat.id,)
                )

                if result:
                    logger.info(f"–ß–∞—Ç {chat.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    await update.message.reply_text("‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
                db.execute_query(
                    "INSERT INTO chats (chat_id, title, is_group) VALUES (?, ?, ?)",
                    (chat.id, chat.title or str(chat.id), is_group)
                )

                logger.info(f"–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: ID={chat.id}, Title={chat.title}")
                await update.message.reply_text(
                    "‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π"
                )

            except sqlite3.Error as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}", exc_info=True)
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã addchat: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

# –ë–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ –∫–ª–∞—Å—Å–∞
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    try:
        bot = TelegramBot()
        asyncio.run(bot.start())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
        if bot and bot._running:
            asyncio.run(bot.stop())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)